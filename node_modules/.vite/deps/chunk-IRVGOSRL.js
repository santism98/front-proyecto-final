import {
  LeafletProvider,
  createLeafletContext
} from "./chunk-2MBI3VX3.js";
import {
  require_leaflet_src
} from "./chunk-43QUR3TC.js";
import {
  require_react
} from "./chunk-NA5ZIJWE.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// .yarn/__virtual__/react-leaflet-virtual-17b96179f9/0/cache/react-leaflet-npm-4.2.1-e2245640e8-79222c2ba0.zip/node_modules/react-leaflet/lib/MapContainer.js
var import_leaflet = __toESM(require_leaflet_src());
var import_react = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function MapContainerComponent({ bounds, boundsOptions, center, children, className, id, placeholder, style, whenReady, zoom, ...options }, forwardedRef) {
  const [props] = (0, import_react.useState)({
    className,
    id,
    style
  });
  const [context, setContext] = (0, import_react.useState)(null);
  (0, import_react.useImperativeHandle)(forwardedRef, () => (context == null ? void 0 : context.map) ?? null, [
    context
  ]);
  const mapRef = (0, import_react.useCallback)((node) => {
    if (node !== null && context === null) {
      const map = new import_leaflet.Map(node, options);
      if (center != null && zoom != null) {
        map.setView(center, zoom);
      } else if (bounds != null) {
        map.fitBounds(bounds, boundsOptions);
      }
      if (whenReady != null) {
        map.whenReady(whenReady);
      }
      setContext(createLeafletContext(map));
    }
  }, []);
  (0, import_react.useEffect)(() => {
    return () => {
      context == null ? void 0 : context.map.remove();
    };
  }, [
    context
  ]);
  const contents = context ? import_react.default.createElement(LeafletProvider, {
    value: context
  }, children) : placeholder ?? null;
  return import_react.default.createElement("div", _extends({}, props, {
    ref: mapRef
  }), contents);
}
var MapContainer = (0, import_react.forwardRef)(MapContainerComponent);

export {
  MapContainer
};
//# sourceMappingURL=chunk-IRVGOSRL.js.map
